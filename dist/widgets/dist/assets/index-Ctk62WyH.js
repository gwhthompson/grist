import"./modulepreload-polyfill-B5Qt9EMX.js";const e={currentId:null,currentUlid:null,initialized:!1,isLoadingComments:!1,previousId:null};console.log("Calling grist.ready...");grist.ready({requiredAccess:"full",allowSelectBy:!0});console.log("grist.ready called, now registering onRecord handler...");grist.onRecord(async(t,o)=>{console.log("onRecord called with record:",t,"mappings:",o),await p();const r=t?.id||null;if(e.previousId!==r&&(console.log("ðŸ”„ RECORD SELECTION CHANGED:",{from:e.previousId,to:r,hasRecord:!!t}),e.previousId=r),e.currentId=r,e.currentUlid=null,console.log("Set currentId to:",e.currentId,"record:",t),e.currentId)try{const l=await grist.getSelectedTableId(),{id:a,ulid:s}=await grist.docApi.fetchTable(l),u=a.indexOf(e.currentId);e.currentUlid=u>=0&&s?s[u]:null,console.log("Set currentUlid to:",e.currentUlid)}catch(l){console.error("Error fetching ulid:",l),e.currentUlid=null}else console.log("No records selected, clearing state");const n=document.querySelector('button[type="submit"]'),i=document.getElementById("contentInput"),c=!!(e.currentId&&e.currentUlid);console.log("Submit button:",n,"disabled:",!c,"currentId:",e.currentId,"currentUlid:",e.currentUlid),n&&i&&(n.disabled=!c,i.placeholder=c?"Enter your comment here...":"Select a record to add comments..."),await g()});grist.onNewRecord(()=>{e.currentId=null,e.currentUlid=null,d([]);const t=document.querySelector('button[type="submit"]'),o=document.getElementById("contentInput");t&&o&&(t.disabled=!0,o.placeholder="Select a record to add comments...")});const p=async()=>{if(e.initialized)return;e.initialized=!0;const[t,o,r]=await Promise.all([grist.getSelectedTableId(),grist.docApi.listTables(),grist.getSelectedTableId().then(grist.docApi.fetchTable)]),n=[];Object.keys(r).includes("ulid")||n.push(["AddHiddenColumn",t,"temporary_trigger",{type:"Int"}],["AddHiddenColumn",t,"ulid",{type:"Text",formula:"from ulid import ULID; value or IFERROR(str(ULID()))",recalcWhen:2,untieColIdFromLabel:!0,isFormula:!1}],["BulkUpdateRecord",t,r.id,{temporary_trigger:r.id.map(()=>1)}],["RemoveColumn",t,"temporary_trigger"]);const i=!o.includes("RowComments");if(i&&n.push(["AddTable","RowComments",[{id:"user",type:"Text"},{id:"timestamp",type:"DateTime"},{id:"row_ulid",type:"Text"},{id:"content",type:"Text"}]]),n.length&&await grist.docApi.applyUserActions(n),i){const{id:c,name:l}=await grist.docApi.fetchTable("_grist_Views"),a=c.filter((s,u)=>l[u]==="RowComments");a.length&&await grist.docApi.applyUserActions(a.map(s=>["RemoveView",s]))}},g=async()=>{if(!e.currentUlid||e.isLoadingComments){e.currentUlid||await d([]);return}e.isLoadingComments=!0;try{const t=await grist.docApi.fetchTable("RowComments");if(!t?.id?.length){await d([]);return}const o=t.id.map((r,n)=>({id:r,content:t.content[n],user:t.user[n],timestamp:t.timestamp[n],row_ulid:t.row_ulid[n],own:t.Own?.[n]})).filter(({row_ulid:r})=>r===e.currentUlid).sort((r,n)=>r.timestamp-n.timestamp);await d(o)}catch(t){console.error("Error loading comments:",t),await d([])}finally{e.isLoadingComments=!1}},d=async t=>{const o=document.getElementById("chatContainer");if(!o)return;const r=n=>{const i=n.own===!0,c=n.user.split("@")[0],l=`<button class="absolute top-2 right-2 w-4 h-4 rounded-full bg-error/80 hover:bg-error text-white flex items-center justify-center text-xs leading-none opacity-0 hover:opacity-100 transition-opacity z-10" onclick="deleteComment(${n.id})" title="Delete comment">Ã—</button>`;return`
      <div class="chat ${i?"chat-end":"chat-start"} relative group" 
           onmouseenter="this.querySelector('button').style.opacity='1'" onmouseleave="this.querySelector('button').style.opacity='0'">
        <div class="chat-header">
          ${c} <time class="text-xs opacity-50">${f(n.timestamp)}</time>
        </div>
        <div class="chat-bubble ${i?"chat-bubble-info":""}">${n.content}</div>
        ${l}
      </div>
    `};o.innerHTML=t.map(r).join(""),o.scrollTop=o.scrollHeight};window.deleteComment=async t=>{try{await grist.getTable("RowComments").destroy(t),await g()}catch(o){console.error("Error deleting comment:",o)}};const f=t=>{const o=(Date.now()-t*1e3)/1e3,r=Math.floor(o/60),n=Math.floor(o/3600),i=Math.floor(o/86400);return o<60?"just now":o<3600?`${r} min${r!==1?"s":""} ago`:o<86400?`${n} hour${n!==1?"s":""} ago`:o<604800?`${i} day${i!==1?"s":""} ago`:new Date(t*1e3).toLocaleDateString()},y=async t=>{await grist.getTable("RowComments").create({fields:{timestamp:Date.now()/1e3,row_ulid:e.currentUlid,content:t}}),await g()};console.log("Script loaded, looking for form...");const m=document.getElementById("contentForm");console.log("Form found:",m);console.log("Checking for initial record selection...");setTimeout(()=>{console.log("After timeout - current state:",e);const t=document.querySelector('button[type="submit"]'),o=document.getElementById("contentInput");t&&o&&(console.log("Initial UI update - button disabled:",!e.currentId),t.disabled=!e.currentId,o.placeholder=e.currentId?"Enter your comment here...":"Select a record to add comments...")},1e3);m?(console.log("Attaching submit handler to form"),m.addEventListener("submit",async t=>{console.log("Form submitted!",t),t.preventDefault();const o=t.target.querySelector("#contentInput"),r=o.value.trim();console.log("Content:",r,"currentId:",e.currentId,"currentUlid:",e.currentUlid);const n=!!(e.currentId&&e.currentUlid);if(!r||!n){console.log("Validation failed - content:",r,"hasValidRecord:",n,"currentId:",e.currentId,"currentUlid:",e.currentUlid);return}o.value="";try{console.log("Adding comment..."),await y(r),console.log("Comment added successfully")}catch(i){console.error("Error adding comment:",i)}})):console.error("Form not found!");

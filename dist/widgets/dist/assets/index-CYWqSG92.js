import"./modulepreload-polyfill-B5Qt9EMX.js";const t={currentId:null,currentUlid:null,initialized:!1,isLoadingComments:!1,previousId:null};console.log("Calling grist.ready...");grist.ready({requiredAccess:"full",allowSelectBy:!0});console.log("grist.ready called, now registering onRecord handler...");grist.onRecord(async(e,r)=>{console.log("onRecord called with record:",e,"mappings:",r),await p();const n=e?.id||null;if(t.previousId!==n&&(console.log("ðŸ”„ RECORD SELECTION CHANGED:",{from:t.previousId,to:n,hasRecord:!!e}),t.previousId=n),t.currentId=n,t.currentUlid=null,console.log("Set currentId to:",t.currentId,"record:",e),t.currentId)try{const c=await grist.getSelectedTableId(),{id:a,ulid:s}=await grist.docApi.fetchTable(c),d=a.indexOf(t.currentId);t.currentUlid=d>=0&&s?s[d]:null,console.log("Set currentUlid to:",t.currentUlid)}catch(c){console.error("Error fetching ulid:",c),t.currentUlid=null}else console.log("No records selected, clearing state");const o=document.querySelector('button[type="submit"]'),i=document.getElementById("contentInput"),l=!!(t.currentId&&t.currentUlid);console.log("Submit button:",o,"disabled:",!l,"currentId:",t.currentId,"currentUlid:",t.currentUlid),o&&i&&(o.disabled=!l,i.placeholder=l?"Enter your comment here...":"Select a record to add comments..."),await g()});const p=async()=>{if(t.initialized)return;t.initialized=!0;const[e,r,n]=await Promise.all([grist.getSelectedTableId(),grist.docApi.listTables(),grist.getSelectedTableId().then(grist.docApi.fetchTable)]),o=[];Object.keys(n).includes("ulid")||o.push(["AddHiddenColumn",e,"temporary_trigger",{type:"Int"}],["AddHiddenColumn",e,"ulid",{type:"Text",formula:"from ulid import ULID; value or IFERROR(str(ULID()))",recalcWhen:2,untieColIdFromLabel:!0,isFormula:!1}],["BulkUpdateRecord",e,n.id,{temporary_trigger:n.id.map(()=>1)}],["RemoveColumn",e,"temporary_trigger"]);const i=!r.includes("RowComments");if(i&&o.push(["AddTable","RowComments",[{id:"user",type:"Text"},{id:"timestamp",type:"DateTime"},{id:"row_ulid",type:"Text"},{id:"content",type:"Text"}]]),o.length&&await grist.docApi.applyUserActions(o),i){const{id:l,name:c}=await grist.docApi.fetchTable("_grist_Views"),a=l.filter((s,d)=>c[d]==="RowComments");a.length&&await grist.docApi.applyUserActions(a.map(s=>["RemoveView",s]))}},g=async()=>{if(!t.currentUlid||t.isLoadingComments){t.currentUlid||await u([]);return}t.isLoadingComments=!0;try{const e=await grist.docApi.fetchTable("RowComments");if(!e?.id?.length){await u([]);return}const r=e.id.map((n,o)=>({id:n,content:e.content[o],user:e.user[o],timestamp:e.timestamp[o],row_ulid:e.row_ulid[o],own:e.Own?.[o]})).filter(({row_ulid:n})=>n===t.currentUlid).sort((n,o)=>n.timestamp-o.timestamp);await u(r)}catch(e){console.error("Error loading comments:",e),await u([])}finally{t.isLoadingComments=!1}},u=async e=>{const r=document.getElementById("chatContainer");if(!r)return;const n=o=>{const i=o.own===!0,l=o.user.split("@")[0],c=`<button class="absolute top-2 right-2 w-4 h-4 rounded-full bg-error/80 hover:bg-error text-white flex items-center justify-center text-xs leading-none opacity-0 hover:opacity-100 transition-opacity z-10" onclick="deleteComment(${o.id})" title="Delete comment">Ã—</button>`;return`
      <div class="chat ${i?"chat-end":"chat-start"} relative group" 
           onmouseenter="this.querySelector('button').style.opacity='1'" onmouseleave="this.querySelector('button').style.opacity='0'">
        <div class="chat-header">
          ${l} <time class="text-xs opacity-50">${f(o.timestamp)}</time>
        </div>
        <div class="chat-bubble ${i?"chat-bubble-info":""}">${o.content}</div>
        ${c}
      </div>
    `};r.innerHTML=e.map(n).join(""),r.scrollTop=r.scrollHeight};window.deleteComment=async e=>{try{await grist.getTable("RowComments").destroy(e),await g()}catch(r){console.error("Error deleting comment:",r)}};const f=e=>{const r=(Date.now()-e*1e3)/1e3,n=Math.floor(r/60),o=Math.floor(r/3600),i=Math.floor(r/86400);return r<60?"just now":r<3600?`${n} min${n!==1?"s":""} ago`:r<86400?`${o} hour${o!==1?"s":""} ago`:r<604800?`${i} day${i!==1?"s":""} ago`:new Date(e*1e3).toLocaleDateString()},y=async e=>{await grist.getTable("RowComments").create({fields:{timestamp:Date.now()/1e3,row_ulid:t.currentUlid,content:e}}),await g()};console.log("Script loaded, looking for form...");const m=document.getElementById("contentForm");console.log("Form found:",m);console.log("Checking for initial record selection...");setTimeout(()=>{console.log("After timeout - current state:",t);const e=document.querySelector('button[type="submit"]'),r=document.getElementById("contentInput");e&&r&&(console.log("Initial UI update - button disabled:",!t.currentId),e.disabled=!t.currentId,r.placeholder=t.currentId?"Enter your comment here...":"Select a record to add comments...")},1e3);m?(console.log("Attaching submit handler to form"),m.addEventListener("submit",async e=>{console.log("Form submitted!",e),e.preventDefault();const r=e.target.querySelector("#contentInput"),n=r.value.trim();console.log("Content:",n,"currentId:",t.currentId,"currentUlid:",t.currentUlid);const o=!!(t.currentId&&t.currentUlid);if(!n||!o){console.log("Validation failed - content:",n,"hasValidRecord:",o,"currentId:",t.currentId,"currentUlid:",t.currentUlid);return}r.value="";try{console.log("Adding comment..."),await y(n),console.log("Comment added successfully")}catch(i){console.error("Error adding comment:",i)}})):console.error("Form not found!");

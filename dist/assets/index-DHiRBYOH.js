import"./modulepreload-polyfill-B5Qt9EMX.js";async function p(){const{baseUrl:e,token:o}=await grist.docApi.getAccessToken({readOnly:!0});return fetch(`${new URL(e).origin}/api/profile/user?auth=${o}`).then(r=>r.json())}const t={currentId:null,currentUlid:null,initialized:!1,isLoadingComments:!1,previousId:null};console.log("Calling grist.ready...");grist.ready({requiredAccess:"full",allowSelectBy:!0});console.log("grist.ready called, now registering onRecord handler...");grist.onRecord(async(e,o)=>{console.log("onRecord called with record:",e,"mappings:",o),await f();const r=e?.id||null;if(t.previousId!==r&&(console.log("ðŸ”„ RECORD SELECTION CHANGED:",{from:t.previousId,to:r,hasRecord:!!e}),t.previousId=r),t.currentId=r,t.currentUlid=null,console.log("Set currentId to:",t.currentId,"record:",e),t.currentId)try{const l=await grist.getSelectedTableId(),{id:s,ulid:a}=await grist.docApi.fetchTable(l),d=s.indexOf(t.currentId);t.currentUlid=d>=0&&a?a[d]:null,console.log("Set currentUlid to:",t.currentUlid)}catch(l){console.error("Error fetching ulid:",l),t.currentUlid=null}else console.log("No records selected, clearing state");const n=document.querySelector('button[type="submit"]'),i=document.getElementById("contentInput"),c=!!(t.currentId&&t.currentUlid);console.log("Submit button:",n,"disabled:",!c,"currentId:",t.currentId,"currentUlid:",t.currentUlid),n&&i&&(n.disabled=!c,i.placeholder=c?"Enter your comment here...":"Select a record to add comments..."),await g()});const f=async()=>{if(t.initialized)return;t.initialized=!0;const[e,o,r]=await Promise.all([grist.getSelectedTableId(),grist.docApi.listTables(),grist.getSelectedTableId().then(grist.docApi.fetchTable)]),n=[];Object.keys(r).includes("ulid")||n.push(["AddHiddenColumn",e,"temporary_trigger",{type:"Int"}],["AddHiddenColumn",e,"ulid",{type:"Text",formula:"from ulid import ULID; value or IFERROR(str(ULID()))",recalcWhen:2,untieColIdFromLabel:!0,isFormula:!1}],["BulkUpdateRecord",e,r.id,{temporary_trigger:r.id.map(()=>1)}],["RemoveColumn",e,"temporary_trigger"]);const i=!o.includes("RowComments");if(i&&n.push(["AddTable","RowComments",[{id:"user",type:"Text"},{id:"timestamp",type:"DateTime"},{id:"row_ulid",type:"Text"},{id:"content",type:"Text"}]]),n.length&&await grist.docApi.applyUserActions(n),i){const{id:c,name:l}=await grist.docApi.fetchTable("_grist_Views"),s=c.filter((a,d)=>l[d]==="RowComments");s.length&&await grist.docApi.applyUserActions(s.map(a=>["RemoveView",a]))}},g=async()=>{if(!t.currentUlid||t.isLoadingComments){t.currentUlid||await u([]);return}t.isLoadingComments=!0;try{const e=await grist.docApi.fetchTable("RowComments");if(!e?.id?.length){await u([]);return}const o=e.id.map((r,n)=>({id:r,content:e.content[n],user:e.user[n],timestamp:e.timestamp[n],row_ulid:e.row_ulid[n]})).filter(({row_ulid:r})=>r===t.currentUlid).sort((r,n)=>r.timestamp-n.timestamp);await u(o)}catch(e){console.error("Error loading comments:",e),await u([])}finally{t.isLoadingComments=!1}},u=async e=>{const o=document.getElementById("chatContainer");if(!o)return;const{email:r}=await p(),n=i=>{const c=i.user===r,l=i.user.split("@")[0],s=c?`<button class="absolute top-2 right-2 w-4 h-4 rounded-full bg-error/80 hover:bg-error text-white flex items-center justify-center text-xs leading-none opacity-0 hover:opacity-100 transition-opacity z-10" onclick="deleteComment(${i.id})" title="Delete comment">Ã—</button>`:"";return`
      <div class="chat ${c?"chat-end":"chat-start"} ${c?"relative group":""}" 
           ${c?`onmouseenter="this.querySelector('button').style.opacity='1'" onmouseleave="this.querySelector('button').style.opacity='0'"`:""}>
        <div class="chat-header">
          ${l} <time class="text-xs opacity-50">${y(i.timestamp)}</time>
        </div>
        <div class="chat-bubble">${i.content}</div>
        ${s}
      </div>
    `};o.innerHTML=e.map(n).join(""),o.scrollTop=o.scrollHeight};window.deleteComment=async e=>{try{await grist.getTable("RowComments").destroy(e),await g()}catch(o){console.error("Error deleting comment:",o)}};const y=e=>{const o=(Date.now()-e*1e3)/1e3,r=Math.floor(o/60),n=Math.floor(o/3600),i=Math.floor(o/86400);return o<60?"just now":o<3600?`${r} min${r!==1?"s":""} ago`:o<86400?`${n} hour${n!==1?"s":""} ago`:o<604800?`${i} day${i!==1?"s":""} ago`:new Date(e*1e3).toLocaleDateString()},h=async e=>{const{email:o}=await p();await grist.getTable("RowComments").create({fields:{user:o,timestamp:Date.now()/1e3,row_ulid:t.currentUlid,content:e}}),await g()};console.log("Script loaded, looking for form...");const m=document.getElementById("contentForm");console.log("Form found:",m);console.log("Checking for initial record selection...");setTimeout(()=>{console.log("After timeout - current state:",t);const e=document.querySelector('button[type="submit"]'),o=document.getElementById("contentInput");e&&o&&(console.log("Initial UI update - button disabled:",!t.currentId),e.disabled=!t.currentId,o.placeholder=t.currentId?"Enter your comment here...":"Select a record to add comments...")},1e3);m?(console.log("Attaching submit handler to form"),m.addEventListener("submit",async e=>{console.log("Form submitted!",e),e.preventDefault();const o=e.target.querySelector("#contentInput"),r=o.value.trim();console.log("Content:",r,"currentId:",t.currentId,"currentUlid:",t.currentUlid);const n=!!(t.currentId&&t.currentUlid);if(!r||!n){console.log("Validation failed - content:",r,"hasValidRecord:",n,"currentId:",t.currentId,"currentUlid:",t.currentUlid);return}o.value="";try{console.log("Adding comment..."),await h(r),console.log("Comment added successfully")}catch(i){console.error("Error adding comment:",i)}})):console.error("Form not found!");
